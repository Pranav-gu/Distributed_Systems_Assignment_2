// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protofiles/services.proto

package services_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentGatewayService_RegisterClient_FullMethodName = "/stripe.PaymentGatewayService/RegisterClient"
	PaymentGatewayService_RegisterServer_FullMethodName = "/stripe.PaymentGatewayService/RegisterServer"
	PaymentGatewayService_MakePayment_FullMethodName    = "/stripe.PaymentGatewayService/MakePayment"
	PaymentGatewayService_ViewBalance_FullMethodName    = "/stripe.PaymentGatewayService/ViewBalance"
)

// PaymentGatewayServiceClient is the client API for PaymentGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentGatewayServiceClient interface {
	RegisterClient(ctx context.Context, in *RegisterRequestClient, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterServer(ctx context.Context, in *RegisterRequestServer, opts ...grpc.CallOption) (*RegisterResponse, error)
	MakePayment(ctx context.Context, in *PaymentDetails, opts ...grpc.CallOption) (*PaymentResponse, error)
	ViewBalance(ctx context.Context, in *AccountDetailsRequest, opts ...grpc.CallOption) (*AccountDetailsResponse, error)
}

type paymentGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentGatewayServiceClient(cc grpc.ClientConnInterface) PaymentGatewayServiceClient {
	return &paymentGatewayServiceClient{cc}
}

func (c *paymentGatewayServiceClient) RegisterClient(ctx context.Context, in *RegisterRequestClient, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_RegisterClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) RegisterServer(ctx context.Context, in *RegisterRequestServer, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_RegisterServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) MakePayment(ctx context.Context, in *PaymentDetails, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_MakePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) ViewBalance(ctx context.Context, in *AccountDetailsRequest, opts ...grpc.CallOption) (*AccountDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDetailsResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_ViewBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentGatewayServiceServer is the server API for PaymentGatewayService service.
// All implementations must embed UnimplementedPaymentGatewayServiceServer
// for forward compatibility.
type PaymentGatewayServiceServer interface {
	RegisterClient(context.Context, *RegisterRequestClient) (*RegisterResponse, error)
	RegisterServer(context.Context, *RegisterRequestServer) (*RegisterResponse, error)
	MakePayment(context.Context, *PaymentDetails) (*PaymentResponse, error)
	ViewBalance(context.Context, *AccountDetailsRequest) (*AccountDetailsResponse, error)
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

// UnimplementedPaymentGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentGatewayServiceServer struct{}

func (UnimplementedPaymentGatewayServiceServer) RegisterClient(context.Context, *RegisterRequestClient) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) RegisterServer(context.Context, *RegisterRequestServer) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) MakePayment(context.Context, *PaymentDetails) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePayment not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) ViewBalance(context.Context, *AccountDetailsRequest) (*AccountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewBalance not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) mustEmbedUnimplementedPaymentGatewayServiceServer() {}
func (UnimplementedPaymentGatewayServiceServer) testEmbeddedByValue()                               {}

// UnsafePaymentGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentGatewayServiceServer will
// result in compilation errors.
type UnsafePaymentGatewayServiceServer interface {
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

func RegisterPaymentGatewayServiceServer(s grpc.ServiceRegistrar, srv PaymentGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentGatewayService_ServiceDesc, srv)
}

func _PaymentGatewayService_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).RegisterClient(ctx, req.(*RegisterRequestClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_RegisterServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).RegisterServer(ctx, req.(*RegisterRequestServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_MakePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).MakePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_MakePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).MakePayment(ctx, req.(*PaymentDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_ViewBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).ViewBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_ViewBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).ViewBalance(ctx, req.(*AccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentGatewayService_ServiceDesc is the grpc.ServiceDesc for PaymentGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stripe.PaymentGatewayService",
	HandlerType: (*PaymentGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _PaymentGatewayService_RegisterClient_Handler,
		},
		{
			MethodName: "RegisterServer",
			Handler:    _PaymentGatewayService_RegisterServer_Handler,
		},
		{
			MethodName: "MakePayment",
			Handler:    _PaymentGatewayService_MakePayment_Handler,
		},
		{
			MethodName: "ViewBalance",
			Handler:    _PaymentGatewayService_ViewBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/services.proto",
}

const (
	BankServers_AuthenticateUser_FullMethodName = "/stripe.BankServers/AuthenticateUser"
	BankServers_Transaction_FullMethodName      = "/stripe.BankServers/Transaction"
	BankServers_SendBalanceReq_FullMethodName   = "/stripe.BankServers/SendBalanceReq"
	BankServers_Prepare_FullMethodName          = "/stripe.BankServers/Prepare"
	BankServers_Commit_FullMethodName           = "/stripe.BankServers/Commit"
	BankServers_Abort_FullMethodName            = "/stripe.BankServers/Abort"
)

// BankServersClient is the client API for BankServers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServersClient interface {
	AuthenticateUser(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error)
	Transaction(ctx context.Context, in *PaymentReqGateway, opts ...grpc.CallOption) (*PaymentResponse, error)
	SendBalanceReq(ctx context.Context, in *AccountDetailsReqGateway, opts ...grpc.CallOption) (*AccountDetailsRespGateway, error)
	// New methods for 2-Phase Commit
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error)
}

type bankServersClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServersClient(cc grpc.ClientConnInterface) BankServersClient {
	return &bankServersClient{cc}
}

func (c *bankServersClient) AuthenticateUser(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthRes)
	err := c.cc.Invoke(ctx, BankServers_AuthenticateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServersClient) Transaction(ctx context.Context, in *PaymentReqGateway, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, BankServers_Transaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServersClient) SendBalanceReq(ctx context.Context, in *AccountDetailsReqGateway, opts ...grpc.CallOption) (*AccountDetailsRespGateway, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDetailsRespGateway)
	err := c.cc.Invoke(ctx, BankServers_SendBalanceReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServersClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, BankServers_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServersClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, BankServers_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServersClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortResponse)
	err := c.cc.Invoke(ctx, BankServers_Abort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServersServer is the server API for BankServers service.
// All implementations must embed UnimplementedBankServersServer
// for forward compatibility.
type BankServersServer interface {
	AuthenticateUser(context.Context, *AuthReq) (*AuthRes, error)
	Transaction(context.Context, *PaymentReqGateway) (*PaymentResponse, error)
	SendBalanceReq(context.Context, *AccountDetailsReqGateway) (*AccountDetailsRespGateway, error)
	// New methods for 2-Phase Commit
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	Abort(context.Context, *AbortRequest) (*AbortResponse, error)
	mustEmbedUnimplementedBankServersServer()
}

// UnimplementedBankServersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankServersServer struct{}

func (UnimplementedBankServersServer) AuthenticateUser(context.Context, *AuthReq) (*AuthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedBankServersServer) Transaction(context.Context, *PaymentReqGateway) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedBankServersServer) SendBalanceReq(context.Context, *AccountDetailsReqGateway) (*AccountDetailsRespGateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBalanceReq not implemented")
}
func (UnimplementedBankServersServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedBankServersServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedBankServersServer) Abort(context.Context, *AbortRequest) (*AbortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedBankServersServer) mustEmbedUnimplementedBankServersServer() {}
func (UnimplementedBankServersServer) testEmbeddedByValue()                     {}

// UnsafeBankServersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServersServer will
// result in compilation errors.
type UnsafeBankServersServer interface {
	mustEmbedUnimplementedBankServersServer()
}

func RegisterBankServersServer(s grpc.ServiceRegistrar, srv BankServersServer) {
	// If the following call pancis, it indicates UnimplementedBankServersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankServers_ServiceDesc, srv)
}

func _BankServers_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServersServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankServers_AuthenticateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServersServer).AuthenticateUser(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankServers_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentReqGateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServersServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankServers_Transaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServersServer).Transaction(ctx, req.(*PaymentReqGateway))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankServers_SendBalanceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailsReqGateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServersServer).SendBalanceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankServers_SendBalanceReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServersServer).SendBalanceReq(ctx, req.(*AccountDetailsReqGateway))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankServers_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServersServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankServers_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServersServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankServers_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServersServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankServers_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServersServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankServers_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServersServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankServers_Abort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServersServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankServers_ServiceDesc is the grpc.ServiceDesc for BankServers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankServers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stripe.BankServers",
	HandlerType: (*BankServersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _BankServers_AuthenticateUser_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _BankServers_Transaction_Handler,
		},
		{
			MethodName: "SendBalanceReq",
			Handler:    _BankServers_SendBalanceReq_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _BankServers_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _BankServers_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _BankServers_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/services.proto",
}
