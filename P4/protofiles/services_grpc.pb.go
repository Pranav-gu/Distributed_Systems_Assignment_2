// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protofiles/services.proto

package services_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommanderService_RegisterGeneral_FullMethodName = "/bft.CommanderService/RegisterGeneral"
)

// CommanderServiceClient is the client API for CommanderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommanderServiceClient interface {
	RegisterGeneral(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type commanderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommanderServiceClient(cc grpc.ClientConnInterface) CommanderServiceClient {
	return &commanderServiceClient{cc}
}

func (c *commanderServiceClient) RegisterGeneral(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, CommanderService_RegisterGeneral_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommanderServiceServer is the server API for CommanderService service.
// All implementations must embed UnimplementedCommanderServiceServer
// for forward compatibility.
type CommanderServiceServer interface {
	RegisterGeneral(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedCommanderServiceServer()
}

// UnimplementedCommanderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommanderServiceServer struct{}

func (UnimplementedCommanderServiceServer) RegisterGeneral(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGeneral not implemented")
}
func (UnimplementedCommanderServiceServer) mustEmbedUnimplementedCommanderServiceServer() {}
func (UnimplementedCommanderServiceServer) testEmbeddedByValue()                          {}

// UnsafeCommanderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommanderServiceServer will
// result in compilation errors.
type UnsafeCommanderServiceServer interface {
	mustEmbedUnimplementedCommanderServiceServer()
}

func RegisterCommanderServiceServer(s grpc.ServiceRegistrar, srv CommanderServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommanderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommanderService_ServiceDesc, srv)
}

func _CommanderService_RegisterGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServiceServer).RegisterGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommanderService_RegisterGeneral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServiceServer).RegisterGeneral(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommanderService_ServiceDesc is the grpc.ServiceDesc for CommanderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommanderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bft.CommanderService",
	HandlerType: (*CommanderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGeneral",
			Handler:    _CommanderService_RegisterGeneral_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/services.proto",
}

const (
	GeneralService_CommanderBroadcast_FullMethodName = "/bft.GeneralService/CommanderBroadcast"
	GeneralService_CrossVerification_FullMethodName  = "/bft.GeneralService/CrossVerification"
)

// GeneralServiceClient is the client API for GeneralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralServiceClient interface {
	CommanderBroadcast(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderResponse, error)
	CrossVerification(ctx context.Context, in *Enquire, opts ...grpc.CallOption) (*EnquireResponse, error)
}

type generalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralServiceClient(cc grpc.ClientConnInterface) GeneralServiceClient {
	return &generalServiceClient{cc}
}

func (c *generalServiceClient) CommanderBroadcast(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, GeneralService_CommanderBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalServiceClient) CrossVerification(ctx context.Context, in *Enquire, opts ...grpc.CallOption) (*EnquireResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnquireResponse)
	err := c.cc.Invoke(ctx, GeneralService_CrossVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralServiceServer is the server API for GeneralService service.
// All implementations must embed UnimplementedGeneralServiceServer
// for forward compatibility.
type GeneralServiceServer interface {
	CommanderBroadcast(context.Context, *Order) (*OrderResponse, error)
	CrossVerification(context.Context, *Enquire) (*EnquireResponse, error)
	mustEmbedUnimplementedGeneralServiceServer()
}

// UnimplementedGeneralServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeneralServiceServer struct{}

func (UnimplementedGeneralServiceServer) CommanderBroadcast(context.Context, *Order) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommanderBroadcast not implemented")
}
func (UnimplementedGeneralServiceServer) CrossVerification(context.Context, *Enquire) (*EnquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossVerification not implemented")
}
func (UnimplementedGeneralServiceServer) mustEmbedUnimplementedGeneralServiceServer() {}
func (UnimplementedGeneralServiceServer) testEmbeddedByValue()                        {}

// UnsafeGeneralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralServiceServer will
// result in compilation errors.
type UnsafeGeneralServiceServer interface {
	mustEmbedUnimplementedGeneralServiceServer()
}

func RegisterGeneralServiceServer(s grpc.ServiceRegistrar, srv GeneralServiceServer) {
	// If the following call pancis, it indicates UnimplementedGeneralServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeneralService_ServiceDesc, srv)
}

func _GeneralService_CommanderBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServiceServer).CommanderBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneralService_CommanderBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServiceServer).CommanderBroadcast(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralService_CrossVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enquire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServiceServer).CrossVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneralService_CrossVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServiceServer).CrossVerification(ctx, req.(*Enquire))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneralService_ServiceDesc is the grpc.ServiceDesc for GeneralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bft.GeneralService",
	HandlerType: (*GeneralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommanderBroadcast",
			Handler:    _GeneralService_CommanderBroadcast_Handler,
		},
		{
			MethodName: "CrossVerification",
			Handler:    _GeneralService_CrossVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/services.proto",
}
